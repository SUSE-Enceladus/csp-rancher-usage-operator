/*
Copyright (c) 2023 SUSE LLC

This program is free software; you can redistribute it and/or
modify it under the terms of version 3 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact SUSE LLC.

To contact SUSE about this file by physical or electronic mail,
you may find current contact information at www.suse.com
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	usagerecordsv1 "github.com/SUSE-Enceladus/csp-rancher-usage-operator/api/usagerecords/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeProductUsages implements ProductUsageInterface
type FakeProductUsages struct {
	Fake *FakeUsagerecordsV1
}

var productusagesResource = schema.GroupVersionResource{Group: "usagerecords.suse.com", Version: "v1", Resource: "productusages"}

var productusagesKind = schema.GroupVersionKind{Group: "usagerecords.suse.com", Version: "v1", Kind: "ProductUsage"}

// Get takes name of the productUsage, and returns the corresponding productUsage object, and an error if there is any.
func (c *FakeProductUsages) Get(ctx context.Context, name string, options v1.GetOptions) (result *usagerecordsv1.ProductUsage, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(productusagesResource, name), &usagerecordsv1.ProductUsage{})
	if obj == nil {
		return nil, err
	}
	return obj.(*usagerecordsv1.ProductUsage), err
}

// List takes label and field selectors, and returns the list of ProductUsages that match those selectors.
func (c *FakeProductUsages) List(ctx context.Context, opts v1.ListOptions) (result *usagerecordsv1.ProductUsageList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(productusagesResource, productusagesKind, opts), &usagerecordsv1.ProductUsageList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &usagerecordsv1.ProductUsageList{ListMeta: obj.(*usagerecordsv1.ProductUsageList).ListMeta}
	for _, item := range obj.(*usagerecordsv1.ProductUsageList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested productUsages.
func (c *FakeProductUsages) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(productusagesResource, opts))
}

// Create takes the representation of a productUsage and creates it.  Returns the server's representation of the productUsage, and an error, if there is any.
func (c *FakeProductUsages) Create(ctx context.Context, productUsage *usagerecordsv1.ProductUsage, opts v1.CreateOptions) (result *usagerecordsv1.ProductUsage, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(productusagesResource, productUsage), &usagerecordsv1.ProductUsage{})
	if obj == nil {
		return nil, err
	}
	return obj.(*usagerecordsv1.ProductUsage), err
}

// Update takes the representation of a productUsage and updates it. Returns the server's representation of the productUsage, and an error, if there is any.
func (c *FakeProductUsages) Update(ctx context.Context, productUsage *usagerecordsv1.ProductUsage, opts v1.UpdateOptions) (result *usagerecordsv1.ProductUsage, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(productusagesResource, productUsage), &usagerecordsv1.ProductUsage{})
	if obj == nil {
		return nil, err
	}
	return obj.(*usagerecordsv1.ProductUsage), err
}

// Delete takes name of the productUsage and deletes it. Returns an error if one occurs.
func (c *FakeProductUsages) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(productusagesResource, name, opts), &usagerecordsv1.ProductUsage{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeProductUsages) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(productusagesResource, listOpts)

	_, err := c.Fake.Invokes(action, &usagerecordsv1.ProductUsageList{})
	return err
}

// Patch applies the patch and returns the patched productUsage.
func (c *FakeProductUsages) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *usagerecordsv1.ProductUsage, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(productusagesResource, name, pt, data, subresources...), &usagerecordsv1.ProductUsage{})
	if obj == nil {
		return nil, err
	}
	return obj.(*usagerecordsv1.ProductUsage), err
}
